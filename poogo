#!/usr/bin/env bash
## ðŸ’© Hugo's stinky step-child who won't stop putting his mark down!
# shellcheck disable=SC2164

shopt -s nullglob

pushd() { command pushd "$@" >/dev/null || exit 1; }
popd() { command popd >/dev/null || exit 1; }

err_msg() {
	echo "$1" && exit 1
}

bootstrap() {
	[ -d "$TARGET" ] && err_msg "Target bootstrap directory ($TARGET) already exists"
	echo "Bootstrapping into $TARGET"
	mkdir -p "$TARGET"
	pushd "$TARGET"
	mkdir posts/ && mkdir about/
	printf "# About me\n\nThis is a nice thing about me." >about/index.md
	printf "# My Blog Title\n\nThis is my blog.\n### Posts\n\n%%POSTS%%" >index.md
	printf "This is my blog header\n\n" >header.md
	printf "This is my blog footer" >footer.md
	echo "Downloading Simple CSS"
	mkdir static/
	wget --quiet -O static/style.css "https://raw.githubusercontent.com/kevquirk/simple.css/main/simple.css"
}

# Convert md file to html without extra html tags
# $1 - markdown file
# $2 - force generate if 1
md_to_html() {
	local filename=${1%.md*}
	[[ ! -f $1 || $1 -ot "$filename.html" && $2 -ne 1 ]] && return 1
	echo "Converting $(realpath "$filename.md") to HTML..."
	jq --slurp --raw-input '{"text": "\(.)", "mode": "markdown"}' <"$1" |
		curl -s --data @- https://api.github.com/markdown >"$filename.html" ||
		err_msg "Couldn't generate HTML using GH API."
}

# Convert md file to full html page
md_to_html_page() {
	local filename=${1%.md*}
	local force=0
	[[ "$filename.html" -ot "$HEADER" ||
		"$filename.html" -ot "$FOOTER" ]] && local force=1

	md_to_html "$1" $force || return 1

	echo "...and creating HTML page $(realpath "$filename.html")..."
	printf "<!DOCTYPE html>
          <link rel=\"stylesheet\" href=\"%s\">
          <html>
          <body>
          %s
            %s
          %s
          </html>" \
		"$CSS" \
		"<header>$(<"${HEADER:-/dev/null}")</header>" \
		"$(<"$filename.html")" \
		"<footer>$(<"${FOOTER:-/dev/null}")</footer>" >"$filename.html"
}

generate_posts() {
	pushd posts/
	ALL_POSTS=()        # set of posts to show on /posts/index.html
	local regen_index=0 # whether or not we should regen /index.html and /post/index.html
	for md in *.md; do
		local title timestamp filename link
		filename=${md%.md*}
		title=$(sed -rn 's/# (.*)/\1/p' "$md")
		timestamp=$(date -r "$md" "+%s")
		link="[$title](/posts/$filename.html)<br>"
		ALL_POSTS+=("$timestamp $link")
		md_to_html_page "$md" && regen_index=1
	done
	if [[ ! -f index.html || $regen_index -eq 1 ]]; then
		echo "Regenerating posts/index.html..."
		# sort posts by timestamp and format timestamp
		readarray -t ALL_POSTS < <(
			while read -r ts title; do
				printf "**%s** %s\n" "$(date -d "@$ts" "+%e %b %Y")" "$title" |
					tee -a index.md
			done < <(printf "%s\n" "${ALL_POSTS[@]}" | sort -nr -k1)
		)
		md_to_html_page index.md
		rm index.md
		regen_index=1
	fi
	popd
	return $regen_index
}

generate() {
	pushd "$TARGET"
	[ ! -d posts ] && err_msg "Posts directory not found."

	# Prepare header/footer and CSS
	md_to_html header.md
	md_to_html footer.md
	HEADER=$(realpath "./header.html")
	FOOTER=$(realpath "./footer.html")
	CSS="/static/style.css"

	generate_posts
	if [[ "$?" -eq 1 || index.md -nt index.html ]]; then
		echo "Regenerating index.html..."
		# Add posts section to root index.html
		sed "s;%POSTS%;${ALL_POSTS[*]:0:6};" index.md >index.md.tmp
		md_to_html_page index.md.tmp
		rm index.md.tmp
	fi

	md_to_html_page about/index.md
}

usage() {
	echo "poogo - a static-site generator for blogs."
	echo "Usage:  poogo -b [-p PATH] - bootstrap a skeleton blog"
	echo "        poogo -g [-p PATH] - generate HTML from Markdown files"
	echo "        poogo -n [-p PATH] - create new post"
}

while getopts "bghn:p:" opt; do
	case "${opt}" in
	b)
		BOOTSTRAP=1
		;;
	g)
		GENERATE=1
		;;
	n)
		NEW=${OPTARG}
		;;
	p)
		TARGET=${OPTARG:=.}
		;;
	h | *)
		usage && exit 1
		;;
	esac
done

[ -n "$BOOTSTRAP" ] &&
	bootstrap &&
	exit 0

[ -n "$NEW" ] &&
	(echo "# ${NEW^}" >"$TARGET/posts/$NEW.md" ||
		err_msg "Couldn't write new post. Maybe $TARGET/posts doesn't exist?")

[ -n "$GENERATE" ] &&
	generate
